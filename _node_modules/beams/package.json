{
  "name": "beams",
  "description": "A long-polling Node.js server and client",
  "keywords": [
    "beam",
    "beams",
    "long",
    "polling",
    "lighter",
    "lightweight",
    "simple",
    "fast",
    "ajax",
    "xhr",
    "socket",
    "io"
  ],
  "version": "0.0.16",
  "main": "beams.js",
  "homepage": "http://lighter.io/beams",
  "repository": {
    "type": "git",
    "url": "git://github.com/zerious/beams.git"
  },
  "author": {
    "name": "Sam Eubank",
    "email": "sameubank@gmail.com"
  },
  "contributors": [
    {
      "name": "Sam Eubank",
      "email": "sameubank@gmail.com"
    }
  ],
  "engines": [
    "node >= 0.2.6"
  ],
  "scripts": {
    "build": "node chug/chug",
    "test": "mocha",
    "retest": "mocha --watch",
    "cover": "istanbul cover _mocha",
    "report": "open coverage/lcov-report/index.html",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "dependencies": {
    "jymin": "0.3.0"
  },
  "devDependencies": {
    "assert-plus": "0.1.5",
    "mocha": "1.20.1",
    "istanbul": "0.2.11",
    "express": "4.4.4",
    "zeriousify": "0.1.5",
    "coveralls": "2.10.1",
    "chug": "0.1.35",
    "figlet": "1.0.9"
  },
  "bugs": {
    "url": "http://github.com/zerious/beams/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/zerious/beams/blob/master/MIT-LICENSE.md"
    }
  ],
  "_id": "beams@0.0.16",
  "dist": {
    "shasum": "f47bbc7c81044c3b5565c1e840a6a8f2dece2a22",
    "tarball": "http://registry.npmjs.org/beams/-/beams-0.0.16.tgz"
  },
  "_from": "beams@",
  "_npmVersion": "1.4.3",
  "_npmUser": {
    "name": "zerious",
    "email": "sameubank@gmail.com"
  },
  "maintainers": [
    {
      "name": "zerious",
      "email": "sameubank@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "f47bbc7c81044c3b5565c1e840a6a8f2dece2a22",
  "_resolved": "https://registry.npmjs.org/beams/-/beams-0.0.16.tgz",
  "readme": "# Beams\n\n[![NPM Version](https://badge.fury.io/js/beams.png)](http://badge.fury.io/js/beams)\n[![Build Status](https://travis-ci.org/zerious/beams.png?branch=master)](https://travis-ci.org/zerious/beams)\n[![Code Coverage](https://coveralls.io/repos/zerious/beams/badge.png?branch=master)](https://coveralls.io/r/zerious/beams)\n[![Dependencies](https://david-dm.org/zerious/beams.png?theme=shields.io)](https://david-dm.org/zerious/beams)\n[![Support](http://img.shields.io/gittip/zerious.png)](https://www.gittip.com/zerious/)\n\nBeams is a long-polling Node.js server extension and client library.\n\n## Getting started\n\nHere's a simple chat server and client:\n\n```javascript\nvar server = require('express')();\nserver.listen(80);\nvar beams = require('beams');\nbeams.setServer(server);\nvar messages = [];\nbeams\n  .connect(function (beam) {\n    beam.emit('messages', messages);\n  })\n  .on('message', function (text) {\n    var message = {from: this.id, text: data};\n    messages.push(message);\n    beams.emit('messages', [message]);\n  });\n```\n\n```html\n<script src=\"http://localhost/beams-client.min.js\"></script>\n<script>\nBeams()\n  .on('messages', function (data) {\n    console.log(data);\n    beam.emit('my other event', { my: 'data' });\n  });\n</script>\n```\n\n\n## API\n\n#### beams.setServer(Server server)\nPass an Express-like server to `setServer`, and it will create a Beams server on\ntop of the server.\n`route` on any assets that you'd like to route via `server.get`\n\n#### beams.connect(function callback)\nRun a callback when a client connects.\n\n#### beams.on(string name, function callback)\nWhen a message with a given name is received, run a callback on each client.\nThe `callback` takes a `data` argument, and its `this` context is the client\non which it is being run.\n\n#### beams.handle(string name, function callback)\nRemove any existing handlers for the specified message name, and replace\nwith a single `callback`, like calling `beams.on` only once.  This is useful\nfor frameworks that reload modules in dev mode rather than restarting the\nserver.\n\n#### beams.emit(string name, object data)\nSend a named message with some data to every client.\n\n#### beams.each(callback)\nRun a callback on each client. The `callback` takes a `client` argument.\n\n#### Array beams.clients\nA list of the clients that are connected.\n\n#### Object beams.handlers\nArrays of message handlers keyed by message name.\n\n#### number beams.pollTimeout\nHow long (in milliseconds) to wait before forcing clients to reconnect.\n",
  "readmeFilename": "README.md"
}
