{
  "name": "lighter",
  "description": "A lightweight Node.js framework",
  "keywords": [
    "lighter",
    "isomorphic",
    "mvc",
    "http",
    "https",
    "router",
    "express",
    "alternative"
  ],
  "version": "0.1.51",
  "main": "lighter.js",
  "bin": {
    "lighter": "commands/cli.js"
  },
  "homepage": "http://lighter.io/lighter",
  "repository": {
    "type": "git",
    "url": "git://github.com/zerious/lighter.git"
  },
  "bugs": {
    "url": "http://github.com/zerious/lighter/issues"
  },
  "author": {
    "name": "Sam Eubank",
    "email": "sameubank@gmail.com"
  },
  "contributors": [
    {
      "name": "Sam Eubank",
      "email": "sameubank@gmail.com"
    }
  ],
  "engines": [
    "node >= 0.2.6"
  ],
  "scripts": {
    "test": "mocha",
    "report": "open coverage/lcov-report/index.html",
    "retest": "mocha --watch",
    "cover": "istanbul cover _mocha",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "dependencies": {
    "chug": "0.1.37",
    "ltl": "0.1.13",
    "beams": "0.0.16",
    "jymin": "0.3.0",
    "cedar": "0.0.14",
    "za": "0.0.17",
    "splode": "0.0.2",
    "ormy": "0.1.4",
    "shellify": "0.0.2",
    "d6": "0.1.3",
    "mc": "1.0.6"
  },
  "devDependencies": {
    "assert-plus": "0.1.5",
    "mocha": "1.20.1",
    "istanbul": "0.2.11",
    "coveralls": "2.10.1",
    "express": "4.4.4",
    "zeriousify": "0.1.6"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/zerious/lighter/blob/master/MIT-LICENSE.md"
    }
  ],
  "readme": "# Lighter\n\n[![NPM Version](https://badge.fury.io/js/lighter.png)](http://badge.fury.io/js/lighter)\n[![Build Status](https://travis-ci.org/zerious/lighter.png?branch=master)](https://travis-ci.org/zerious/lighter)\n[![Code Coverage](https://coveralls.io/repos/zerious/lighter/badge.png?branch=master)](https://coveralls.io/r/zerious/lighter)\n[![Dependencies](https://david-dm.org/zerious/lighter.png?theme=shields.io)](https://david-dm.org/zerious/lighter)\n[![Support](http://img.shields.io/gittip/zerious.png)](https://www.gittip.com/zerious/)\n\nLighter is a lightweight Node.js framework for web applications and APIs.\n\n### Isomorphic JavaScript\n\nWhen used for web applications, Lighter will render views either on the server or the\nclient.  This functionality will allow Lighter to optimize for low latency.  The first\nrequest to your web app renders HTML and returns it to the browser, then views are\nlazy-loaded into the client so that subsequent requests only need to return JSON that\nthe client can render using its cached views.\n\n### Auto-routing\n\nLighter is influenced by the PHP framework CodeIgniter, in that by default, controllers\nand their methods will automagically get added to the router based on their names and\nwhere they are found under the controllers directory. This means you don't have to\nwrite a ton of routing code, and you know where to find a controller method if you\nknow its URL, and vice versa.\n\n### Performance\n\nLighter's default router is extremely simple so that it can respond faster than other\nframeworks such as Express, Restify and Meteor. The caveat is that dynamic paths are\nnot supported by default, so you would need to do `/blog/article?id=1` rather than\n`/blog/article/1`. It's a small price to pay for amazing server throughput.\n\n### Building APIs\n\nLighter's simplicity makes it great for APIs, and we'll be adding functionality to\nauto-generate API documentation.\n\n## Getting started\n\nTo use lighter, first you must install it.\n\n```bash.\nnpm i lighter\n```\n\nUsing lighter is as simple as creating a lighter directory structure (as seen below)\nand then creating an `app.js` that requires lighter.\n\n```javascript\nvar lighter = require('lighter');\n```\n\nThen you can run your app with Node.\n```bash\nnode app\n```\n\nSoon, this setup process will be replaced with a CLI that will go something like:\n```bash\nsudo npm i -g lighter\nlighter new myapp\ncd myapp\nnode app\n```\n\n### Directory structure\n\n#### Assets loaded with Chug\n\nLighter uses Chug to cache its static assets, and each type of asset comes from an\nassigned directory. Chug also loads models views and controllers. Changes inside\nthose directories will trigger reloads of the items that have been changed.\n```\n/\n  controllers/\n  models/\n  public/\n  scripts/\n  styles/\n  views/\n```\n\nIf you want to load assets from other directories (such as node_modules/), you can\nadd to the list of locations using an API method like `addPublics`, `addScripts`,\n`addStyles` or `addViews`.\n\n### Controllers\n\nHere's a sample controller that you could save into\n`/controllers/ContactController.js`:\n\n```bash\nvar Controller = require('lighter/lib/Controller');\n\nmodule.exports = Controller.extend({\n\n  index: function GET(request, response) {\n    response.writeHead(200, {'content-type': 'text/html'});\n    response.end('TODO: Show contact info and a form.');\n  },\n\n  send: function POST(request, response) {\n    response.writeHead(200, {'content-type': 'text/html'});\n    response.end('TODO: Thank the user for contacting us.');\n  }\n\n});\n```\n\nTo see the contact us form, you would visit `/contact`, and the form you submit\nwould post to `/contact/send`. Once we have models, we can do more interesting\nthings here.\n\n\n### Models\n\nModels are coming soon...\n\n### Views\n\nViews are rendered by name from `response.view`.\n\nThe following would render a template that is stored at `/views/hello.ltl` with a\ncontext indicating who to say hello to.\n```javascript\nfunction GET(request, response) {\n  response.view('hello', {who: 'World'});\n}\n```\n\n## API\n\n#### lighter.addControllers(Array|string location)\nThe `location` argument can be a single location or an array of locations. Lighter\nadds this location to the array of controller locations to be chugged.\n\n#### lighter.addPublics(Array|string location)\nThe `location` argument can be a single location or an array of locations. Lighter\nadds this location to the array of public file locations to be chugged.\n\n#### lighter.addScripts(Array|string location)\nThe `location` argument can be a single location or an array of locations. Lighter\nadds this location to the array of script file locations to be chugged.\n\n#### lighter.addStyles(Array|string location)\nThe `location` argument can be a single location or an array of locations. Lighter\nadds this location to the array of style file locations to be chugged.\n\n#### lighter.addViews(Array|string location)\nThe `location` argument can be a single location or an array of locations. Lighter\nadds this location to the array of view file locations to be chugged.\n\n#### lighter.setApp(Object app)\nIf you would like to use Express (or another framework that exposes\n`app.get(path, callback)` etc., to do your routing, you can set Lighter to do this.\n\n#### lighter.setLogger(Object logger)\nSet an alternative logger that exposes `logger.log(message)`.\n\n#### lighter.setHttpPort(port)\nSet the port that you would like Lighter to use for HTTP.\n\n#### lighter.setHttpsPort(port)\nSet the port that you would like Lighter to use for HTTPS.\n\n#### lighter.setAsciiArt(art)\nSet an array of lines that you would like to be displayed upon startup.\n\n#### Object lighter.chug\nA reference to the Chug module that Lighter uses.\n\n#### Object lighter.beams\nA reference to the Beams module that Lighter uses.\n\n#### Object lighter.colors\nA reference to the Colors module that Lighter uses.\n\n#### Object lighter.app\nA reference to the Express-like app that's been set via `lighter.setApp(app)`.\n\n#### Object lighter.logger\nA reference to the logger that's been set via `lighter.setLogger(logger)`.\n\n#### Array|Object lighter.publics\nThe files that have been added via `lighter.setPublic(location)` or\nfound in the `publics/` directory.\n\n#### Array|Object lighter.scripts\nThe scripts that have been added via `lighter.setPublic(location)` or\nfound in the `scripts/` directory.\n\n#### Array|Object lighter.styles\nThe stylesheets that have been added via `lighter.setPublic(location)` or\nfound in the `styles/` directory.\n\n#### Array|Object lighter.views\nThe views that have been added via `lighter.setPublic(location)` or\nfound in the `views/` directory.\n\n#### Array|Object lighter.controllers\nThe controllers that have been found in the `controllers/` directory.\n\n#### Array|Object lighter.models\nThe models that have been found in the `models/` directory.\n\n#### lighter.env\nThe environment string that comes from process.env.NODE_ENV.  Expected values\nare `dev`, `test`, `stage`, `canary` or `prod`.",
  "readmeFilename": "README.md",
  "_id": "lighter@0.1.51",
  "_from": "lighter@latest"
}
